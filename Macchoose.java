class Maxchoose { public boolean canIWin(int maxChoosableInteger, int desiredTotal) { if (desiredTotal <= maxChoosableInteger) { return true; } if ((maxChoosableInteger * (maxChoosableInteger + 1) / 2) < desiredTotal) { return false; } return canIWinHelper(maxChoosableInteger, desiredTotal, 0, new HashMap<>()); } private boolean canIWinHelper(int maxChoosableInteger, int desiredTotal, int mask, Map<Integer, Boolean> map) { if (desiredTotal <= 0) { return false; } if (map.containsKey(mask)) { return map.get(mask); } for (int i = 1; i <= maxChoosableInteger; i++) { int bit = 1 << (i - 1); if ((mask & bit) == 0) { if (!canIWinHelper(maxChoosableInteger, desiredTotal - i, mask | bit, map)) { map.put(mask, true); return true; } } } map.put(mask, false); return false; } }
